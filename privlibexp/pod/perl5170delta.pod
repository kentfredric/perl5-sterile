=encoding utf8

=head1 NAME

perldelta - what is new for perl v5.17.0

=head1 DESCRIPTION

This document describes differences between the 5.16.0 release and
the 5.17.0 release.

If you are upgrading from an earlier release such as 5.16.0, first read
L<perl5160delta>, which describes differences between 5.14.0 and
5.16.0.

=head1 Incompatible Changes

=head2 qw(...) can no longer be used as parentheses

C<qw> lists used to fool the parser into thinking they were always
surrounded by parentheses.  This permitted some surprising constructions
such as C<foreach $x qw(a b c) {...}>, which should really be written
C<foreach $x (qw(a b c)) {...}>.  These would sometimes get the lexer into
the wrong state, so they didn't fully work, and the similar C<foreach qw(a
b c) {...}> that one might expect to be permitted never worked at all.

This side effect of C<qw> has now been abolished.  It has been deprecated
since Perl 5.13.11.  It is now necessary to use real parentheses
everywhere that the grammar calls for them.

=head2 C<\s> in regular expressions now matches a Vertical Tab (experimental)

This is an experiment early in the development cycle to see what
repercussions arise from this change.  It may well be that we decide
to require a C<"use feature"> to activate this behavior.  Because
of the experimental nature of this, which may be reversed, the
documentation has not been changed to reflect it.

=head1 Deprecations

=head2 Unescaped braces in regexps

Literal unescaped C<{> in regular expressions is now deprecated.  Every
brace character should be either escaped (by a preceding backslash) or
part of a construct where it's a metacharacter.  This catches likely typos
such as C</f{,3}/>.  It will also allow braces to be used in the future
to delimit parameters to metacharacters that currently take no parameters.

=head1 Performance Enhancements

=over 4

=item *

Filetest ops manage the stack in a fractionally more efficient manner.

=item *

Globs used in a numeric context are now numerified directly in most cases,
rather than being numerified via stringification.

=back

=head1 Modules and Pragmata

=head2 Updated Modules and Pragmata

=over 4

=item *

L<B> has been upgraded from version 1.34 to 1.35.

The C<stashlen> method of COPs has been added.   This provides access to an
internal field added in perl 5.16 under threaded builds [perl #113034].

=item *

L<ExtUtils::ParseXS> has been upgraded from version 3.16 to 3.17.

The generated C code now avoids unnecessarily incrementing
C<PL_amagic_generation> on Perl versions where it's done automatically
(or on current Perl where the variable no longer exists).

=item *

L<File::DosGlob> has been upgraded from version 1.06 to 1.07.

Small documentation and comment fixes.

=item *

L<File::Find> has been upgraded from version 1.20 to 1.21.

Individual files may now appear in list of directories to be searched
[perl #59750].

=item *

L<File::stat> has been upgraded from version 1.05 to 1.06.

C<File::stat> ignores the L<filetest> pragma, and warns when used in
combination therewith.  But it was not warning for C<-r>.  This has been
fixed [perl #111640].

C<-p> now works, and does not return false for pipes [perl #111638].

=item *

L<Hash::Util> has been upgraded from version 0.11 to 0.12.

C<hash_unlocked> and C<hashref_unlocked> now returns true if the hash is
unlocked, instead of always returning false [perl #112126].

C<hash_unlocked>, C<hashref_unlocked>, C<lock_hash_recurse> and
C<unlock_hash_recurse> are now exportable [perl #112126].

Two new functions, C<hash_locked> and C<hashref_locked>, have been added.
Oddly enough, these two functions were already exported, even though they
did not exist [perl #112126].

=item *

L<Module::CoreList> has been upgraded from version 2.66 to 2.67.

=item *

L<overload> has been upgraded from version 1.18 to 1.19.

C<no overload> now warns for invalid arguments, just like C<use overload>.

=item *

L<Pod::Functions> has been upgraded from version 1.05 to 1.06.

Typo fix in generated documentation.

=item *

L<Storable> has been upgraded from version 2.34 to 2.35.

Modifying C<$_[0]> within C<STORABLE_freeze> no longer results in crashes
[perl #112358].

An object whose class implements C<STORABLE_attach> is now thawed only once
when there are multiple references to it in the structure being thawed
[perl #111918].

=item *

L<utf8> has been upgraded from version 1.09 to 1.10.

Some documentation has been clarified.

=back

=head2 Removed Modules and Pragmata

=over 4

=item *

L<Version::Requirements> has been removed from the core distribution.  It is
available under a different name: L<CPAN::Meta::Requirements>.

=back

=head1 Documentation

=head2 Changes to Existing Documentation

=head3 L<perldata>

=over 4

=item *

Now explicitly documents the behaviour of hash initializer lists that
contain duplicate keys.

=back

=head3 L<perldiag>

=over 4

=item *

The explanation of symbolic references being prevented by "strict refs"
now doesn't assume that the reader knows what symbolic references are.

=back

=head3 L<perlfunc>

=over 4

=item *

The return value of C<pipe> is now documented.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics

=head3 New Warnings

=over 4

=item *

"L<Unescaped left brace in regex is deprecated, passed
through|perldiag/"Unescaped left brace in regex is deprecated, passed
through">" is a new deprecation warning.  See L</Unescaped braces in
regexps>.

=back

=head1 Testing

=over 4

=item *

The test suite now has a section for tests that require very large amounts
of memory.  These tests won't run by default; they can be enabled by
setting the C<PERL_TEST_MEMORY> environment variable to the number of
gibibytes of memory that may be safely used.

=back

=head1 Platform Support

=head2 Platform-Specific Notes

=over 4

=item clang++

There is now a workaround for a compiler bug that prevented compiling
with clang++ since Perl 5.15.7 [perl #112786].

=item C++

When compiling the Perl core as C++ (which is only semi-supported), the
mathom functions are now compiled as C<extern "C">, to ensure proper
binary compatibility.  (However, binary compatibility isn't generally
guaranteed anyway in the situations where this would matter.)

=item VMS

It should now be possible to compile Perl as C++ on VMS.

=back

=head1 Internal Changes

=over 4

=item *

The C<CV *> typemap entry now supports C<&{}> overloading and typeglobs,
just like C<&{...}> [perl #96872].

=item *

The C<SVf_AMAGIC> flag to indicate overloading is now on the stash, not the
object.  It is now set automatically whenever a method or @ISA changes, so
its meaning has changed, too.  It now means "potentially overloaded".  When
the overload table is calculated, the flag is automatically turned off if
there is no overloading, so there should be no noticeable slowdown.

The staleness of the overload tables is now checked when overload methods
are invoked, rather than during C<bless>.

"A" magic is gone.  The changes to the handling of the C<SVf_AMAGIC> flag
eliminate the need for it.

C<PL_amagic_generation> has been removed as no longer necessary.  For XS
modules, it is now a macro alias to C<PL_na>.

The fallback overload setting is now stored in a stash entry separate from
overloadedness itself.

=item *

The character-processing code has been cleaned up in places.  The changes
should be operationally invisible.

=back

=head1 Selected Bug Fixes

=over 4

=item *

C<goto ''> now looks for an empty label, producing the "goto must have
label" error message, instead of exiting the program [perl #111794].

=item *

C<goto "\0"> now dies with "Can't find label" instead of "goto must have
label".

=item *

The C function C<hv_store> used to result in crashes when used on C<%^H>
[perl #111000].

=item *

A call checker attached to a closure prototype via C<cv_set_call_checker>
is now copied to closures cloned from it.  So C<cv_set_call_checker> now
works inside an attribute handler for a closure.

=item *

Writing to C<$^N> used to have no effect.  Now it croaks with "Modification
of a read-only value" by default, but that can be overridden by a custom
regular expression engine, as with C<$1> [perl #112184].

=item *

C<undef> on a control character glob (C<undef *^H>) no longer emits an
erroneous warning about ambiguity [perl #112456].

=item *

For efficiency's sake, many operators and built-in functions return the
same scalar each time.  Lvalue subroutines and subroutines in the CORE::
namespace were allowing this implementation detail to leak through.
C<print &CORE::uc("a"), &CORE::uc("b")> used to print "BB".  The same thing
would happen with an lvalue subroutine returning the return value of C<uc>.
Now the value is copied in such cases.

=item *

C<method {}> syntax with an empty block or a block returning an empty list
used to crash or use some random value left on the stack as its invocant.
Now it produces an error.

=item *

C<vec> now works with extremely large offsets (E<gt>2 GB) [perl #111730].

=item *

Changes to overload settings now take effect immediately, as do changes to
inheritance that affect overloading.  They used to take effect only after
C<bless>.

Objects that were created before a class had any overloading used to remain
non-overloaded even if the class gained overloading through C<use overload>
or @ISA changes, and even after C<bless>.  This has been fixed
[perl #112708].

=item *

Classes with overloading can now inherit fallback values.

=item *

Overloading was not respecting a fallback value of 0 if there were
overloaded objects on both sides of an assignment operator like C<+=>
[perl #111856].

=item *

C<pos> now croaks with hash and array arguments, instead of producing
erroneous warnings.

=item *

C<while(each %h)> now implies C<while(defined($_ = each %h))>, like
C<readline> and C<readdir>.

=item *

Subs in the CORE:: namespace no longer crash after C<undef *_> when called
with no argument list (C<&CORE::time> with no parentheses).

=item *

Unicode 6.1 published an incorrect alias for one of the
Canonical_Combining_Class property's values (which range between 0 and
254).  The alias C<CCC133> should have been C<CCC132>.  Perl now
overrides the data file furnished by Unicode to give the correct value.

=item *

C<unpack> no longer produces the "'/' must follow a numeric type in unpack"
error when it is the data that are at fault [perl #60204].

=item *

C<join> and C<"@array"> now call FETCH only once on a tied C<$">
[perl #8931].

=item *

Some subroutine calls generated by compiling core ops affected by a
C<CORE::GLOBAL> override had op checking performed twice.  The checking
is always idempotent for pure Perl code, but the double checking can
matter when custom call checkers are involved.

=item *

A race condition used to exist around fork that could cause a signal sent to
the parent to be handled by both parent and child. Signals are now blocked
briefly around fork to prevent this from happening [perl #82580].

=back

=head1 Acknowledgements

Perl 5.17.0 represents approximately 1 week of development since Perl 5.16.0
and contains approximately 17,000 lines of changes across 180 files from 26
authors.

Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers. The following people are known to have contributed the
improvements that became Perl 5.16.1:

Alan Haggai Alavi, Aristotle Pagaltzis, Brian Fraser, Chris 'BinGOs' Williams,
Craig A. Berry, Dagfinn Ilmari Mannsåker, Eric Brine, Father Chrysostomos,
Igor Zaytsev, James E Keenan, Karl Williamson, Leon Timmermans, Lukas Mai,
Marcus Holland-Moritz, Matthew Horsfall, Moritz Lenz, Rafael Garcia-Suarez,
Reini Urban, Ricardo Signes, Robin Barker, Ronald J. Kimball, Smylers, Steffen
Müller, Steve Hay, Tony Cook, Zefram.

The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please see
the F<AUTHORS> file in the Perl source distribution.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug>
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of C<perl -V>, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5-security-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details
on what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
